terraform {
  required_providers {
    linode = {
      source  = "linode/linode"
      version = "~> 3"
    }

    local = {
      source  = "hashicorp/local"
      version = "~> 2"
    }
  }
}

provider "linode" {
  token = var.api_token
}

locals {
  ssh_authorized_keys = [trimspace(file(pathexpand(var.ssh_pubkey_path)))]

  cloud_init_rendered = templatefile("${path.module}/cloud-init.yaml", {
    admin_user          = var.admin_user
    ssh_authorized_keys = local.ssh_authorized_keys
  })

  cloud_init_base64 = base64encode(local.cloud_init_rendered)
}

resource "linode_vpc" "kube_vpc" {
  label       = "kubespray-vpc"
  region      = var.region
  description = "Dedicated VPC for Kubespray clusters"
}

resource "linode_vpc_subnet" "kube_subnet" {
  label  = "kubespray-subnet"
  vpc_id = linode_vpc.kube_vpc.id
  ipv4   = var.vpc_cidr
}

module "kube_controllers" {
  source = "./modules/vm_group"

  instances     = var.controller_instances
  prefix        = "kube-controller"
  region        = var.region
  instance_type = var.controller_type
  image         = var.image
  tags          = concat(var.base_tags, ["controller"])
  subnet_id     = linode_vpc_subnet.kube_subnet.id

  private_ip       = false
  authorized_keys  = local.ssh_authorized_keys
  root_pass        = var.root_pass
  user_data_base64 = local.cloud_init_base64
  backups_enabled  = var.backups_enabled
  swap_size        = var.swap_size_mb
}

module "kube_workers" {
  source = "./modules/vm_group"

  instances     = var.worker_instances
  prefix        = "kube-worker"
  region        = var.region
  instance_type = var.worker_type
  image         = var.image
  tags          = concat(var.base_tags, ["worker"])
  subnet_id     = linode_vpc_subnet.kube_subnet.id

  private_ip       = false
  authorized_keys  = local.ssh_authorized_keys
  root_pass        = var.root_pass
  user_data_base64 = local.cloud_init_base64
  backups_enabled  = var.backups_enabled
  swap_size        = var.swap_size_mb
}

resource "linode_firewall" "kubespray" {
  label = "kubespray-firewall"

  inbound {
    label    = "allow-internal-tcp"
    action   = "ACCEPT"
    protocol = "TCP"
    ipv4     = [var.vpc_cidr]
  }

  inbound {
    label    = "allow-internal-udp"
    action   = "ACCEPT"
    protocol = "UDP"
    ipv4     = [var.vpc_cidr]
  }

  inbound {
    label    = "allow-icmp"
    action   = "ACCEPT"
    protocol = "ICMP"
    ipv4     = ["0.0.0.0/0"]
  }

  inbound {
    label    = "allow-control-plane"
    action   = "ACCEPT"
    protocol = "TCP"
    ports    = "22,80,443,6443"
    ipv4     = ["0.0.0.0/0"]
  }

  inbound {
    label    = "allow-nodeports"
    action   = "ACCEPT"
    protocol = "TCP"
    ports    = "30000-32767"
    ipv4     = ["0.0.0.0/0"]
  }

  inbound_policy  = "DROP"
  outbound_policy = "ACCEPT"

  linodes = concat(
    module.kube_controllers.instance_ids,
    module.kube_workers.instance_ids,
  )
}

locals {
  kube_control_plane_nodes = [
    for idx, inst in module.kube_controllers.instances : {
      name             = inst.label
      ansible_host     = inst.public_ip
      ip               = inst.private_ip
      etcd_member_name = "etcd${idx + 1}"
    }
  ]

  kube_worker_nodes = [
    for inst in module.kube_workers.instances : {
      name         = inst.label
      ansible_host = inst.public_ip
      ip           = inst.private_ip
    }
  ]

  inventory_header = <<-EOT
    # This inventory describes a HA topology with stacked etcd on the control plane nodes
    # and worker nodes for Kubespray deployments on Linode
    # Generated by Terraform on ${timestamp()}
  EOT

  kube_control_plane_block = join(
    "\n",
    concat(
      ["[kube_control_plane]"],
      [
        for node in local.kube_control_plane_nodes :
        "${node.name} ansible_host=${node.ansible_host} ip=${node.ip} etcd_member_name=${node.etcd_member_name}"
      ],
    ),
  )

  etcd_block = "[etcd:children]\nkube_control_plane"

  kube_node_block = join(
    "\n",
    concat(
      ["[kube_node]"],
      [
        for node in local.kube_worker_nodes :
        "${node.name} ansible_host=${node.ansible_host} ip=${node.ip}"
      ],
    ),
  )

  kube_all_vars_block = <<-EOT
    [all:vars]
    ansible_user=${var.admin_user}
    ansible_ssh_private_key_file=${var.ssh_privatekey_path}
  EOT

  inventory_content = format(
    "%s\n\n%s\n\n%s\n\n%s\n\n%s\n",
    trimspace(local.inventory_header),
    local.kube_control_plane_block,
    local.etcd_block,
    local.kube_node_block,
    local.kube_all_vars_block,
  )
}

resource "local_file" "kubespray_inventory" {
  filename        = "${path.root}/../../kubespray/inventory/atlas/inventory.ini"
  content         = local.inventory_content
  file_permission = "0644"
}
